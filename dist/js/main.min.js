"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,r){var t;if(e)return"string"==typeof e?_arrayLikeToArray(e,r):"Map"===(t="Object"===(t=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:t)||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?_arrayLikeToArray(e,r):void 0}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,o=new Array(r);t<r;t++)o[t]=e[t];return o}var burgerBtn=document.querySelector(".burger-btn"),navActive=document.querySelector(".nav__mobile"),mobileItem=document.querySelectorAll(".nav__item"),nav=document.getElementById("spy-nav"),sections=_toConsumableArray(document.querySelectorAll(".section"));function mobileNav(){navActive.classList.toggle("nav__mobile--active");var r;r=0,mobileItem.forEach(function(e){e.classList.toggle("mobile__animation"),e.style.animationDelay="."+r+"s",r++})}burgerBtn.addEventListener("click",mobileNav);var options={threshold:.6},spyNav=function(e,r){e.forEach(function(e){console.log(e);var r=e.target.id,r=nav.querySelector('[href="#'.concat(r,'"'));r.classList.remove("nav__items-item--active"),e.isIntersecting&&r.classList.add("nav__items-item--active")})},observer=new IntersectionObserver(spyNav,options);sections.forEach(function(e){observer.observe(e)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiYnVyZ2VyQnRuIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwibmF2QWN0aXZlIiwibW9iaWxlSXRlbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJuYXYiLCJnZXRFbGVtZW50QnlJZCIsInNlY3Rpb25zIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwibW9iaWxlTmF2IiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiZm9yRWFjaCIsIml0ZW0iLCJkZWxheVRpbWUiLCJuYXZBbmltYXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwib3B0aW9ucyIsInRocmVzaG9sZCIsInNweU5hdiIsImVudHJpZXMiLCJlbnRyeSIsImNvbnNvbGUiLCJpc0ludGVyc2VjdGluZyIsImFkZCIsImNvbmNhdCIsImlkIiwicmVtb3ZlIiwib2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsInNlY3Rpb24iLCJvYnNlcnZlIl0sIm1hcHBpbmdzIjoicStCQUFBLElBQU1BLFVBQVlDLFNBQVNDLGNBQWMsYUFBYSxFQUNoREMsVUFBWUYsU0FBU0MsY0FBYyxjQUFjLEVBQ2pERSxXQUFhSCxTQUFTSSxpQkFBaUIsWUFBWSxFQUNuREMsSUFBTUwsU0FBU00sZUFBZSxTQUFTLEVBQ3ZDQyxTQUFRQyxtQkFBT1IsU0FBU0ksaUJBQWlCLFVBQVUsQ0FBQyxFQUUxRCxTQUFTSyxZQUNSUCxVQUFVUSxVQUFVQyxPQUFPLHFCQUFxQixFQU5qRCxJQUNNUixFQUFBQSxFQUFhSCxFQUVuQkcsV0FBY1MsUUFBQSxTQUFBQyxHQUVkQSxFQUFBSCxVQUFrQkMsT0FBRyxtQkFBQSxFQUNwQlQsRUFBQUEsTUFBVVEsZUFBaUIsSUFBQUksRUFBQSxJQUUzQkEsQ0FBTUMsRUFPTCxDQUFDLENBR0gsQ0FFQWhCLFVBTElpQixpQkFBQSxRQUFBUCxTQUFBLEVBT0osSUFBQVEsUUFBQSxDQUlDQyxVQUFXLEVBRVhBLEVBR09DLE9BQVMsU0FBQUMsRUFBVEQsR0FFTEMsRUFFUVIsUUFBS1MsU0FBQUEsR0FHWkMsUUFBTUgsSUFBTUUsQ0FBT3BCLEVBSW5CLElBQUtvQixFQUFNRSxFQUFBQSxPQUFORixHQUVDRixFQUFDVCxJQUFVYyxjQUFJLFdBQUFDLE9BQUFDLEVBQXlCLEdBQUEsQ0FBQSxFQUVoRFAsRUFBQVQsVUFBQWlCLE9BQUEseUJBQUEsRUFLUWYsRUFBQUEsZ0JBRU5PLEVBQUFULFVBQUFjLElBQUEseUJBQUEsQ0FSRixDQUFDLENBQ0YsRUFFTUksU0FBVyxJQUFJQyxxQkFBcUJWLE9BQVFGLE9BQU8sRUFHekRWLFNBQVNLLFFBQVMsU0FBQWtCLEdBQ2pCRixTQUFTRyxRQUFRRCxDQUFPLENBQ3hCLENBQUMiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBidXJnZXJCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnVyZ2VyLWJ0bicpXHJcbmNvbnN0IG5hdkFjdGl2ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXZfX21vYmlsZScpXHJcbmNvbnN0IG1vYmlsZUl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmF2X19pdGVtJylcclxuY29uc3QgbmF2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NweS1uYXYnKVxyXG5jb25zdCBzZWN0aW9ucyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VjdGlvbicpXVxyXG5cclxuZnVuY3Rpb24gbW9iaWxlTmF2KCkge1xyXG5cdG5hdkFjdGl2ZS5jbGFzc0xpc3QudG9nZ2xlKCduYXZfX21vYmlsZS0tYWN0aXZlJylcclxuXHJcblx0Y29uc3QgbmF2QW5pbWF0aW9uID0gKCkgPT4ge1xyXG5cdFx0bGV0IGRlbGF5VGltZSA9IDBcclxuXHJcblx0XHRtb2JpbGVJdGVtLmZvckVhY2goaXRlbSA9PiB7XHJcblx0XHRcdGl0ZW0uY2xhc3NMaXN0LnRvZ2dsZSgnbW9iaWxlX19hbmltYXRpb24nKVxyXG5cdFx0XHRpdGVtLnN0eWxlLmFuaW1hdGlvbkRlbGF5ID0gJy4nICsgZGVsYXlUaW1lICsgJ3MnXHJcblx0XHRcdGRlbGF5VGltZSsrXHJcblx0XHR9KVxyXG5cdH1cclxuXHRuYXZBbmltYXRpb24oKVxyXG59XHJcblxyXG5idXJnZXJCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBtb2JpbGVOYXYpXHJcblxyXG4vLyBTQ1JPTExTUFlcclxuXHJcblxyXG4gICAgXHJcblx0bGV0IG9wdGlvbnMgPSB7XHJcblx0XHJcblx0dGhyZXNob2xkOiAuNixcclxuICB9XHJcbiAgXHJcbiAgY29uc3Qgc3B5TmF2ID0gKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XHJcblx0XHJcblx0ICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XHJcblxyXG5cdFx0ICBjb25zb2xlLmxvZyhlbnRyeSk7XHJcblxyXG5cdFx0ICBjb25zdCB7IGlkIH0gPSBlbnRyeS50YXJnZXQ7XHJcblx0XHQgIGNvbnN0IHNweU5hdiA9IG5hdi5xdWVyeVNlbGVjdG9yKGBbaHJlZj1cIiMke2lkfVwiYCk7XHJcblx0ICBcclxuXHRcdCAgc3B5TmF2LmNsYXNzTGlzdC5yZW1vdmUoXCJuYXZfX2l0ZW1zLWl0ZW0tLWFjdGl2ZVwiKTtcclxuXHJcblx0XHQgIGlmICghZW50cnkuaXNJbnRlcnNlY3RpbmcpIHJldHVybjtcclxuXHRcdCAgXHJcblx0XHQgIHNweU5hdi5jbGFzc0xpc3QuYWRkKFwibmF2X19pdGVtcy1pdGVtLS1hY3RpdmVcIik7XHJcblx0XHR9KVxyXG5cdH1cclxuXHRcclxuXHRjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihzcHlOYXYsIG9wdGlvbnMpO1xyXG5cdFxyXG5cdFxyXG5cdHNlY3Rpb25zLmZvckVhY2goIHNlY3Rpb24gPT4ge1xyXG5cdFx0b2JzZXJ2ZXIub2JzZXJ2ZShzZWN0aW9uKTtcclxuXHRcdH0pXHJcbiAgXHJcbiAgXHJcblxyXG5cclxuIl19
